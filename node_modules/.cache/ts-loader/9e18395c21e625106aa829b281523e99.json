{"remainingRequest":"/Users/melodysu/Downloads/EquivalencyCalculator/node_modules/babel-loader/lib/index.js!/Users/melodysu/Downloads/EquivalencyCalculator/node_modules/ts-loader/index.js??ref--13-2!/Users/melodysu/Downloads/EquivalencyCalculator/src/main.ts","dependencies":[{"path":"/Users/melodysu/Downloads/EquivalencyCalculator/src/main.ts","mtime":1601916108000},{"path":"/Users/melodysu/Downloads/EquivalencyCalculator/node_modules/cache-loader/dist/cjs.js","mtime":499205700000},{"path":"/Users/melodysu/Downloads/EquivalencyCalculator/node_modules/babel-loader/lib/index.js","mtime":499205700000},{"path":"/Users/melodysu/Downloads/EquivalencyCalculator/node_modules/ts-loader/index.js","mtime":499205700000}],"contextDependencies":[],"result":["import $ from 'jquery';\nlet starting_points_factors = {\n  \"gasoline\": 0.008887,\n  \"kilowatthours\": 0.000707040,\n  \"MCF\": 0.054868\n};\nlet finalResultUnits = 2;\nlet equiv_factors = [4.628696, 8.666, 0.008887, 0.431926, 75.5395, 5.906467, 0.060477, 0.765724, 147.826131, 0.024462013, 181.852164, 2.940000, 3893003, 0.000907554, 0.000403, 20.58, 4632, 0.026323, 0.01018, 0.023502, 0.000007841155617, 6.86814 // T&D Line Losses\n];\nvar multiples = [0.9071847, 0.00045359237, 1, 0.001];\n\nfunction roundIt(number) {\n  // this function rounds according to the following rules:\n  // - If the figure is above 100 it rounds to a whole number.\n  // - If the figure is between 1 and 100, it rounds to one decimal place.\n  // - If the figure is between 0.001 and 1, it rounds to three decimal places.\n  // - If the figure is less than 0.001, it rounds to four decimal places.\n  var absolute = Math.abs(number);\n\n  if (isNaN(number) || number == 0) {\n    return number;\n  } else {\n    // If the result is above 100 let's just use a whole number. \n    if (absolute > 100) {\n      number = Math.round(number);\n    } // If it's lower than 100 but greater than 1, let's show it out to one decimal place (e.g., 10.1).\n    else if (absolute < 100 && absolute > 1) {\n        number = Math.round(number * 10) / 10;\n      } // If it's below zero, let's show it out to two decimal places for numbers up to 1/100 (e.g., 0.95, or 0.09)\n      // (Note: at the request of the client, changed this part of the rounding rule to round to 3 decimal places)\n      else if (absolute < 1 && absolute > 0.001) {\n          //number = Math.round(number * 100) / 100;\n          number = Math.round(number * 1000) / 1000;\n        } //  and out to four decimal places for numbers smaller than that (e.g., 0.0097, 0.0030).\n        else {\n            number = Math.round(number * 10000) / 10000;\n          }\n\n    return number;\n  }\n}\n\nfunction commaSplit(srcNumber) {\n  var txtNumber = new String(srcNumber);\n\n  if (isNaN(srcNumber) || txtNumber == \"\") {\n    return srcNumber;\n  } else {\n    var rxSplit = new RegExp('([0-9])([0-9][0-9][0-9][,.])');\n    var arrNumber = txtNumber.split('.');\n    arrNumber[0] += '.';\n\n    do {\n      arrNumber[0] = arrNumber[0].replace(rxSplit, '$1,$2');\n    } while (rxSplit.test(arrNumber[0]));\n\n    if (arrNumber.length > 1) {\n      return arrNumber.join('');\n    } else {\n      return arrNumber[0].split('.')[0];\n    }\n  }\n}\n\nfunction calculateTotal(CO2equiv) {\n  let total = CO2equiv;\n  $(\"#output\").show();\n  $(\"#y0\").val(commaSplit(roundIt(total / multiples[finalResultUnits])));\n\n  for (let i = 1; i <= equiv_factors.length; i++) {\n    let fieldName = \"#y\" + i;\n\n    if ($(fieldName) != null) {\n      $(fieldName).val(commaSplit(roundIt(total / equiv_factors[i - 1])));\n    }\n  }\n}\n\n$(\"#starting_points\").on(\"submit\", function () {\n  let userValue = Number($(\"#starting-input\").val());\n  let eType = String($(\"#equiv-type\").val());\n  let CO2equiv = userValue * starting_points_factors[eType];\n  calculateTotal(CO2equiv);\n  return false;\n});",{"version":3,"sources":["/Users/melodysu/Downloads/EquivalencyCalculator/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import $ from 'jquery';\r\n\r\nlet starting_points_factors: {[index: string]: number} =\r\n{\r\n    \"gasoline\": 0.008887,\r\n    \"kilowatthours\": 0.000707040,\r\n    \"MCF\": 0.054868\r\n};\r\n\r\nlet finalResultUnits = 2;\r\n\r\nlet equiv_factors =\r\n    [\r\n        4.628696,\t\t// Passenger cars not driven for one year\r\n        8.666,\t\t// Household energy use\r\n        0.008887,\t// Gallons of gasoline\r\n        0.431926,\t\t// Barrels of oil\r\n        75.5395,\t\t// Tanker trucks filled with gasoline\r\n        5.906467,\t\t// Household electricity use for one year (# of households)\r\n        0.060477,\t\t// Number of tree seedlings grown for 10 years\r\n        0.765724,\t\t// Acres of U.S. forests storing carbon for 1 year\r\n        147.826131,\t\t// Acres of U.S. forests preserved from conversion to cropland\r\n        0.024462013,\t\t// Propane cylinders used for home barbeques\r\n        181.852164,\t\t// Coal burned/railcars of coal\r\n        2.940000,\t\t// Tons of waste recycled instead of landfilled \r\n        3893003,\t// coal fired power plant for one year\r\n        0.000907554,\t// Pounds of coal burned\r\n        0.000403,\t// Miles driven by the average passenger vehicle per year\r\n        20.58,\t\t// Number of garbage trucks of waste recycled instead of landfilled\r\n        4632,\t\t// Number of wind turbines running for a year\r\n        0.026323, \t// Number of incandescent bulbs switched to LEDs\r\n        0.01018, \t// Gallons of diesel consumed\r\n        0.023502, \t// Trash bags of waste recycled instead of landfilled\r\n        0.000007841155617, \t// Number of smartphones charged\r\n        6.86814 \t// T&D Line Losses\r\n    ];\r\n\r\nvar multiples = [0.9071847,0.00045359237,1,0.001];\r\n\r\nfunction roundIt(number: number)\r\n{\r\n    // this function rounds according to the following rules:\r\n    // - If the figure is above 100 it rounds to a whole number.\r\n    // - If the figure is between 1 and 100, it rounds to one decimal place.\r\n    // - If the figure is between 0.001 and 1, it rounds to three decimal places.\r\n    // - If the figure is less than 0.001, it rounds to four decimal places.\r\n\r\n    var absolute = Math.abs(number);\r\n\r\n    if(isNaN(number) || number == 0)\r\n    {\r\n        return number;\r\n    }\r\n    else\r\n    {\r\n        // If the result is above 100 let's just use a whole number. \r\n        if(absolute > 100)\r\n        {\r\n            number = Math.round(number);\r\n        }\r\n        // If it's lower than 100 but greater than 1, let's show it out to one decimal place (e.g., 10.1).\r\n        else if((absolute < 100) && (absolute > 1))\r\n        {\r\n            number = Math.round(number * 10) / 10;\r\n        }\r\n        // If it's below zero, let's show it out to two decimal places for numbers up to 1/100 (e.g., 0.95, or 0.09)\r\n        // (Note: at the request of the client, changed this part of the rounding rule to round to 3 decimal places)\r\n        else if((absolute < 1) && (absolute > 0.001))\r\n        {\r\n            //number = Math.round(number * 100) / 100;\r\n            number = Math.round(number * 1000) / 1000;\r\n        }\r\n        //  and out to four decimal places for numbers smaller than that (e.g., 0.0097, 0.0030).\r\n        else\r\n        {\r\n            number = Math.round(number * 10000) / 10000;\r\n        }\r\n\r\n        return number;\r\n    }\r\n}\r\n\r\nfunction commaSplit(srcNumber: number)\r\n{\r\n    var txtNumber = new String(srcNumber);\r\n\r\n    if(isNaN(srcNumber) || txtNumber == \"\")\r\n    {\r\n        return srcNumber;\r\n    }\r\n    else\r\n    {\r\n        var rxSplit = new RegExp('([0-9])([0-9][0-9][0-9][,.])');\r\n        var arrNumber = txtNumber.split('.');\r\n        arrNumber[0] += '.';\r\n\r\n        do\r\n        {\r\n            arrNumber[0] = arrNumber[0].replace(rxSplit,'$1,$2');\r\n        } while(rxSplit.test(arrNumber[0]));\r\n\r\n        if(arrNumber.length > 1)\r\n        {\r\n            return arrNumber.join('');\r\n        }\r\n        else\r\n        {\r\n            return arrNumber[0].split('.')[0];\r\n        }\r\n    }\r\n}\r\n\r\nfunction calculateTotal(CO2equiv: number)\r\n{\r\n    let total = CO2equiv;\r\n    $(\"#output\").show();\r\n    $(\"#y0\").val(commaSplit(roundIt(total / multiples[finalResultUnits])));\r\n\r\n    for(let i = 1;i <= equiv_factors.length;i++)\r\n    {\r\n        let fieldName = \"#y\" + i;\r\n\r\n        if($(fieldName) != null)\r\n        {\r\n            $(fieldName).val(commaSplit(roundIt(total / equiv_factors[i - 1])));\r\n        }\r\n    }\r\n}\r\n\r\n$(\"#starting_points\").on(\"submit\",function()\r\n{\r\n    let userValue = Number($(\"#starting-input\").val());\r\n    let eType = String($(\"#equiv-type\").val());\r\n    let CO2equiv = userValue * starting_points_factors[eType];\r\n    calculateTotal(CO2equiv);\r\n    return false;\r\n});"],"sourceRoot":""}]}